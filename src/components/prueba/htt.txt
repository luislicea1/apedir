import "./styles.css";
import { motion } from "framer-motion";

export default function App() {
  return (
    <motion.div
      className="box"
      whileHover={{ scale: 1.1 }}
      transition={{ type: "spring", stiffness: 400, damping: 10 }}
    />
  );
}


import * as React from "react";
import { render } from "react-dom";
import { motion } from "framer-motion";

import "./styles.css";

const App = () => {
  return (
    <div className="example-container">
      <motion.div whileHover={{ scale: 1.2 }} whileTap={{ scale: 0.8 }} />
    </div>
  );
};

render(<App />, document.getElementById("root"));


import * as React from "react";
import { render } from "react-dom";
import { Example } from "./Example";

import "./styles.css";

const App = () => (
  <div className="example-container">
    <Example />
  </div>
);

render(<App />, document.getElementById("root"));




import "./styles.css";
import * as React from "react";
import { useState } from "react";
import { star, heart, hand, plane, lightning, note } from "./paths";
import { motion, useMotionValue, useTransform, animate } from "framer-motion";
import { getIndex, useFlubber } from "./use-flubber";

const paths = [lightning, hand, plane, heart, note, star, lightning];
const colors = [
  "#00cc88",
  "#0099ff",
  "#8855ff",
  "#ff0055",
  "#ee4444",
  "#ffcc00",
  "#00cc88"
];

export default function App() {
  const [pathIndex, setPathIndex] = useState(0);
  const progress = useMotionValue(pathIndex);
  const fill = useTransform(progress, paths.map(getIndex), colors);
  const path = useFlubber(progress, paths);

  React.useEffect(() => {
    const animation = animate(progress, pathIndex, {
      duration: 0.8,
      ease: "easeInOut",
      onComplete: () => {
        if (pathIndex === paths.length - 1) {
          progress.set(0);
          setPathIndex(1);
        } else {
          setPathIndex(pathIndex + 1);
        }
      }
    });

    return () => animation.stop();
  }, [pathIndex]);

  return (
    <svg width="400" height="400">
      <g transform="translate(10 10) scale(17 17)">
        <motion.path fill={fill} d={path} />
      </g>
    </svg>
  );
}





import "./styles.css";
import { useState, useRef, useEffect } from "react";
import { AnimatePresence, motion, usePresence } from "framer-motion";
import { gsap } from "gsap";

function Box() {
  const ref = useRef(null);
  const [isPresent, safeToRemove] = usePresence();

  useEffect(() => {
    if (!isPresent) {
      gsap.to(ref.current, {
        opacity: 0,
        onComplete: () => safeToRemove?.()
      });
    }
  }, [isPresent, safeToRemove]);

  return <div className="box" ref={ref} />;
}

export default function App() {
  const [show, setShow] = useState(true);

  return (
    <div className="example">
      <div className="controls">
        <motion.button
          whileTap={{ scale: 0.95 }}
          onClick={() => {
            setShow(!show);
          }}
        >
          {show ? "Hide" : "Show"}
        </motion.button>
      </div>

      <AnimatePresence>{show ? <Box /> : null}</AnimatePresence>
    </div>
  );
}